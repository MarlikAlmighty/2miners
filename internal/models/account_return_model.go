// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// AccountReturnModel account return model
//
// swagger:model AccountReturnModel
type AccountReturnModel struct {

	// 24hnumreward
	Nr24hnumreward int64 `json:"24hnumreward,omitempty"`

	// 24hreward
	Nr24hreward int64 `json:"24hreward,omitempty"`

	// current hashrate
	CurrentHashrate float32 `json:"currentHashrate,omitempty"`

	// current luck
	CurrentLuck string `json:"currentLuck,omitempty"`

	// hashrate
	Hashrate float32 `json:"hashrate,omitempty"`

	// page size
	PageSize int64 `json:"pageSize,omitempty"`

	// payments
	Payments []*PaymentModel `json:"payments"`

	// payments total
	PaymentsTotal int64 `json:"paymentsTotal,omitempty"`

	// rewards
	Rewards []*RewardsModel `json:"rewards"`

	// round shares
	RoundShares int64 `json:"roundShares,omitempty"`

	// shares
	Shares []string `json:"shares"`

	// stats
	Stats *StatsModel `json:"stats,omitempty"`

	// sumrewards
	Sumrewards []*SumrewardsModel `json:"sumrewards"`

	// workers
	Workers map[string]WorkerGroupModel `json:"workers,omitempty"`

	// workers offline
	WorkersOffline int64 `json:"workersOffline,omitempty"`

	// workers online
	WorkersOnline int64 `json:"workersOnline,omitempty"`

	// workers total
	WorkersTotal int64 `json:"workersTotal,omitempty"`
}

// Validate validates this account return model
func (m *AccountReturnModel) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validatePayments(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRewards(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStats(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSumrewards(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateWorkers(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *AccountReturnModel) validatePayments(formats strfmt.Registry) error {
	if swag.IsZero(m.Payments) { // not required
		return nil
	}

	for i := 0; i < len(m.Payments); i++ {
		if swag.IsZero(m.Payments[i]) { // not required
			continue
		}

		if m.Payments[i] != nil {
			if err := m.Payments[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("payments" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *AccountReturnModel) validateRewards(formats strfmt.Registry) error {
	if swag.IsZero(m.Rewards) { // not required
		return nil
	}

	for i := 0; i < len(m.Rewards); i++ {
		if swag.IsZero(m.Rewards[i]) { // not required
			continue
		}

		if m.Rewards[i] != nil {
			if err := m.Rewards[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("rewards" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *AccountReturnModel) validateStats(formats strfmt.Registry) error {
	if swag.IsZero(m.Stats) { // not required
		return nil
	}

	if m.Stats != nil {
		if err := m.Stats.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("stats")
			}
			return err
		}
	}

	return nil
}

func (m *AccountReturnModel) validateSumrewards(formats strfmt.Registry) error {
	if swag.IsZero(m.Sumrewards) { // not required
		return nil
	}

	for i := 0; i < len(m.Sumrewards); i++ {
		if swag.IsZero(m.Sumrewards[i]) { // not required
			continue
		}

		if m.Sumrewards[i] != nil {
			if err := m.Sumrewards[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("sumrewards" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *AccountReturnModel) validateWorkers(formats strfmt.Registry) error {
	if swag.IsZero(m.Workers) { // not required
		return nil
	}

	for k := range m.Workers {

		if err := validate.Required("workers"+"."+k, "body", m.Workers[k]); err != nil {
			return err
		}
		if val, ok := m.Workers[k]; ok {
			if err := val.Validate(formats); err != nil {
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this account return model based on the context it is used
func (m *AccountReturnModel) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidatePayments(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateRewards(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateStats(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateSumrewards(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateWorkers(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *AccountReturnModel) contextValidatePayments(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Payments); i++ {

		if m.Payments[i] != nil {
			if err := m.Payments[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("payments" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *AccountReturnModel) contextValidateRewards(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Rewards); i++ {

		if m.Rewards[i] != nil {
			if err := m.Rewards[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("rewards" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *AccountReturnModel) contextValidateStats(ctx context.Context, formats strfmt.Registry) error {

	if m.Stats != nil {
		if err := m.Stats.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("stats")
			}
			return err
		}
	}

	return nil
}

func (m *AccountReturnModel) contextValidateSumrewards(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Sumrewards); i++ {

		if m.Sumrewards[i] != nil {
			if err := m.Sumrewards[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("sumrewards" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *AccountReturnModel) contextValidateWorkers(ctx context.Context, formats strfmt.Registry) error {

	for k := range m.Workers {

		if val, ok := m.Workers[k]; ok {
			if err := val.ContextValidate(ctx, formats); err != nil {
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *AccountReturnModel) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *AccountReturnModel) UnmarshalBinary(b []byte) error {
	var res AccountReturnModel
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
