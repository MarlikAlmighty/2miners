// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// BlockReturnModel block return model
//
// swagger:model BlockReturnModel
type BlockReturnModel struct {

	// candidates
	Candidates []*CandidatesModel `json:"candidates"`

	// candidates total
	CandidatesTotal int64 `json:"candidatesTotal,omitempty"`

	// immature
	Immature []*ImMaturedModel `json:"immature"`

	// immature total
	ImmatureTotal int64 `json:"immatureTotal,omitempty"`

	// luck
	Luck *LuckModel `json:"luck,omitempty"`

	// matured
	Matured []*MaturedModel `json:"matured"`

	// matured total
	MaturedTotal int64 `json:"maturedTotal,omitempty"`
}

// Validate validates this block return model
func (m *BlockReturnModel) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCandidates(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateImmature(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLuck(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMatured(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *BlockReturnModel) validateCandidates(formats strfmt.Registry) error {
	if swag.IsZero(m.Candidates) { // not required
		return nil
	}

	for i := 0; i < len(m.Candidates); i++ {
		if swag.IsZero(m.Candidates[i]) { // not required
			continue
		}

		if m.Candidates[i] != nil {
			if err := m.Candidates[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("candidates" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *BlockReturnModel) validateImmature(formats strfmt.Registry) error {
	if swag.IsZero(m.Immature) { // not required
		return nil
	}

	for i := 0; i < len(m.Immature); i++ {
		if swag.IsZero(m.Immature[i]) { // not required
			continue
		}

		if m.Immature[i] != nil {
			if err := m.Immature[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("immature" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *BlockReturnModel) validateLuck(formats strfmt.Registry) error {
	if swag.IsZero(m.Luck) { // not required
		return nil
	}

	if m.Luck != nil {
		if err := m.Luck.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("luck")
			}
			return err
		}
	}

	return nil
}

func (m *BlockReturnModel) validateMatured(formats strfmt.Registry) error {
	if swag.IsZero(m.Matured) { // not required
		return nil
	}

	for i := 0; i < len(m.Matured); i++ {
		if swag.IsZero(m.Matured[i]) { // not required
			continue
		}

		if m.Matured[i] != nil {
			if err := m.Matured[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("matured" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this block return model based on the context it is used
func (m *BlockReturnModel) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateCandidates(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateImmature(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateLuck(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateMatured(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *BlockReturnModel) contextValidateCandidates(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Candidates); i++ {

		if m.Candidates[i] != nil {
			if err := m.Candidates[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("candidates" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *BlockReturnModel) contextValidateImmature(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Immature); i++ {

		if m.Immature[i] != nil {
			if err := m.Immature[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("immature" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *BlockReturnModel) contextValidateLuck(ctx context.Context, formats strfmt.Registry) error {

	if m.Luck != nil {
		if err := m.Luck.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("luck")
			}
			return err
		}
	}

	return nil
}

func (m *BlockReturnModel) contextValidateMatured(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Matured); i++ {

		if m.Matured[i] != nil {
			if err := m.Matured[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("matured" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *BlockReturnModel) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *BlockReturnModel) UnmarshalBinary(b []byte) error {
	var res BlockReturnModel
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
