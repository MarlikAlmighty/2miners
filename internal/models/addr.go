package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// Addr addr
//
// swagger:model Addr
type Addr struct {

	// addr
	// Min Length: 1
	Addr string `json:"Addr,omitempty"`

	// block
	Block int64 `json:"Block,omitempty"`

	// Id
	ID int64 `json:"Id,omitempty"`

	// monitor addr
	MonitorAddr bool `json:"MonitorAddr,omitempty"`

	// monitor block
	MonitorBlock bool `json:"MonitorBlock,omitempty"`

	// notify
	Notify int64 `json:"Notify,omitempty"`

	// pool
	// Min Length: 1
	Pool string `json:"Pool,omitempty"`
}

// Validate validates this addr
func (m *Addr) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAddr(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePool(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Addr) validateAddr(formats strfmt.Registry) error {
	if swag.IsZero(m.Addr) { // not required
		return nil
	}

	if err := validate.MinLength("Addr", "body", m.Addr, 1); err != nil {
		return err
	}

	return nil
}

func (m *Addr) validatePool(formats strfmt.Registry) error {
	if swag.IsZero(m.Pool) { // not required
		return nil
	}

	if err := validate.MinLength("Pool", "body", m.Pool, 1); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this addr based on context it is used
func (m *Addr) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *Addr) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Addr) UnmarshalBinary(b []byte) error {
	var res Addr
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
